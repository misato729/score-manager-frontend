name: Frontend CI/CD (Gated)

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [ main ]
  workflow_dispatch:

# 同じブランチの古い実行をキャンセル
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # --- 共通: Lint / Typecheck / Unit test ---
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Typecheck
        run: npm run typecheck --if-present

      - name: Unit tests (Vitest)
        run: npm run test:coverage --if-present

  # --- PR用: プレビューにデプロイ → E2E（合格しないとマージ不可） ---
  preview-deploy:
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    runs-on: ubuntu-latest
    needs: ci
    outputs:
      preview_url: ${{ steps.deploy.outputs.preview_url }}
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_SLUG: ${{ secrets.VERCEL_ORG_SLUG }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Add Vercel CLI
        run: npm i -D vercel

      # Vercel プロジェクト設定を反映（Preview 環境）
      - name: vercel pull (preview)
        run: npx vercel pull --yes --environment=preview --token "$VERCEL_TOKEN" ${VERCEL_ORG_SLUG:+--scope "$VERCEL_ORG_SLUG"}

      # Vercel 互換ビルド（再現性の高い .vercel/output を作る）
      - name: vercel build
        run: npx vercel build --token "$VERCEL_TOKEN"

      # 事前ビルドをそのままデプロイ → URL を出力
      - id: deploy
        name: vercel deploy (preview)
        run: |
          url=$(npx vercel deploy --prebuilt --token "$VERCEL_TOKEN" ${VERCEL_ORG_SLUG:+--scope "$VERCEL_ORG_SLUG"})
          echo "preview_url=$url" >> "$GITHUB_OUTPUT"
          echo "Deployed to: $url"

  preview-e2e:
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    runs-on: ubuntu-latest
    needs: [ci, preview-deploy]
    env:
      BASE_URL: ${{ needs.preview-deploy.outputs.preview_url }}
      # Preview Protection を使っている場合は必須
      VERCEL_BYPASS_TOKEN: ${{ secrets.VERCEL_BYPASS_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      # 到達性チェック（保護ヘッダ付き）。200/404が返ればOK扱い
      - name: Wait for login page
        run: |
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "x-vercel-protection-bypass: $VERCEL_BYPASS_TOKEN" \
              "$BASE_URL/login")
            if [ "$code" = "200" ] || [ "$code" = "404" ]; then
              echo "Reachable ($code)"; break
            fi
            echo "Not ready ($code). Retrying..."; sleep 5
          done

      - name: Run E2E Tests (Preview)
        run: npx playwright test tests/e2e/

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-preview
          path: playwright-report

  # --- main push 用: 本番デプロイ → スモーク ---
  prod-deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: ci
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_SLUG: ${{ secrets.VERCEL_ORG_SLUG }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Add Vercel CLI
        run: npm i -D vercel

      - name: vercel pull (production)
        run: npx vercel pull --yes --environment=production --token "$VERCEL_TOKEN" ${VERCEL_ORG_SLUG:+--scope "$VERCEL_ORG_SLUG"}

      - name: Deploy to Vercel (Production)
        run: npx vercel deploy --prod --yes --token "$VERCEL_TOKEN" ${VERCEL_ORG_SLUG:+--scope "$VERCEL_ORG_SLUG"}

  prod-smoke:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [ci, prod-deploy]
    env:
      # ここは本番のカスタムドメイン
      BASE_URL: https://rbplus-rank-manager.site
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run Smoke Test (Production)
        run: npx playwright test tests/e2e/smoke.spec.ts

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-prod
          path: playwright-report
